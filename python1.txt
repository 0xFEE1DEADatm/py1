import random
import time
import threading

# Exercise 1-1: Guess the Number Game
def guess_the_number(min_num, max_num):
    target_number = random.randint(min_num, max_num)
    attempts = 0

    while True:
        user_guess = int(input(f"Guess a number between {min_num} and {max_num}: "))
        attempts += 1

        if user_guess < target_number:
            print("Too low. Try again.")
        elif user_guess > target_number:
            print("Too high. Try again.")
        else:
            print(f"Congratulations! You guessed the number {target_number} in {attempts} attempts.")
            break

# Exercise 1-2: Recursive Factorial Function
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

# Exercise 1-3: Compute Average
def compute_average(*args):
    if len(args) == 0:
        return 0
    return sum(args) / len(args)

# Exercise 1-4: Currying Function
def add(x):
    def add_x(y):
        return x + y
    return add_x

# Exercise 1-5: Execution Time Decorator
def execution_time_decorator(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        print(f"Execution time of {func.__name__}: {end_time - start_time} seconds")
        return result
    return wrapper

# Exercise 1-6: Compute Large Factorial Using Threads
def large_factorial(n,num_threads):
    result = 1
    threads = []

    def compute_partial_factorial(start, end):
        nonlocal result
        for i in range(start, end + 1):
            result *= i

    step = n // num_threads

    for i in range(num_threads):
        start = i * step + 1
        end = (i + 1) * step if i < num_threads - 1 else n
        thread = threading.Thread(target=compute_partial_factorial, args=(start, end))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    return result

# Mini Menu
while True:
    print("\nMini Menu:")
    print("1. Guess the Number Game")
    print("2. Recursive Factorial Function")
    print("3. Compute Average")
    print("4. Currying Function (Addition)")
    print("5. Execution Time Decorator")
    print("6. Compute Large Factorial Using Threads")
    print("0. Exit")

    choice = input("Enter your choice (0-6): ")

    if choice == "0":
        break
    elif choice == "1":
        min_num = int(input("Enter the minimum number: "))
        max_num = int(input("Enter the maximum number: "))
        guess_the_number(min_num, max_num)
    elif choice == "2":
        n = int(input("Enter a number to compute its factorial: "))
        print(f"{n}! = {factorial(n)}")
    elif choice == "3":
        numbers = [float(x) for x in input("Enter numbers separated by spaces: ").split()]
        print("Average:", compute_average(*numbers))
    elif choice == "4":
        x = int(input("Enter the first number: "))
        y = int(input("Enter the second number: "))
        result = add(x)(y)
        print(f"{x} + {y} = {result}")
    elif choice == "5":
        @execution_time_decorator
        def sample_function():
            time.sleep(2)
        sample_function()
    elif choice == "6":
        num = int(input("Enter a number to compute its large factorial: "))
        num_threads = int(input("Enter the number of threads: "))
        print(f"{num}! = {large_factorial(num,num_threads)}")
    else:
        print("Invalid choice. Please select a valid option.")
